"""removing user from database

Revision ID: 8958017e45b8
Revises: ab685cd98d84
Create Date: 2025-02-11 17:32:32.851926

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8958017e45b8'
down_revision: Union[str, None] = 'ab685cd98d84'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First drop foreign key constraints
    op.drop_constraint('progress_logs_related_task_id_fkey', 'progress_logs', type_='foreignkey')
    op.drop_constraint('progress_logs_related_project_id_fkey', 'progress_logs', type_='foreignkey')
    op.drop_constraint('progress_logs_related_goal_id_fkey', 'progress_logs', type_='foreignkey')
    op.drop_constraint('progress_logs_user_id_fkey', 'progress_logs', type_='foreignkey')
    
    op.drop_constraint('tasks_project_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_parent_task_id_fkey', 'tasks', type_='foreignkey')
    
    op.drop_constraint('projects_user_id_fkey', 'projects', type_='foreignkey')
    op.drop_constraint('goals_user_id_fkey', 'goals', type_='foreignkey')
    op.drop_constraint('procrastination_patterns_user_id_fkey', 'procrastination_patterns', type_='foreignkey')
    op.drop_constraint('ai_interactions_user_id_fkey', 'ai_interactions', type_='foreignkey')

    # Then drop the tables in order
    op.drop_table('progress_logs')
    op.drop_table('tasks')
    op.drop_table('procrastination_patterns')
    op.drop_table('ai_interactions')
    op.drop_table('chat_history')
    op.drop_table('projects')
    op.drop_table('goals')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('whatsapp_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_active', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('whatsapp_number', name='users_whatsapp_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('goals',
    sa.Column('goal_id', sa.INTEGER(), server_default=sa.text("nextval('goals_goal_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('goal_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('target_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('current_value', sa.NUMERIC(), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("goal_type::text = ANY (ARRAY['fitness'::character varying, 'learning'::character varying, 'project'::character varying, 'habit'::character varying, 'personal'::character varying]::text[])", name='goals_goal_type_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'achieved'::character varying, 'abandoned'::character varying]::text[])", name='goals_status_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='goals_user_id_fkey'),
    sa.PrimaryKeyConstraint('goal_id', name='goals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('progress_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('log_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('related_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('related_goal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('related_project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('media_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('energy_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mood', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("log_type::text = ANY (ARRAY['task_update'::character varying, 'goal_progress'::character varying, 'media_upload'::character varying, 'activity'::character varying, 'focus_session'::character varying]::text[])", name='progress_logs_log_type_check'),
    sa.CheckConstraint('energy_level >= 1 AND energy_level <= 5', name='progress_logs_energy_level_check'),
    sa.ForeignKeyConstraint(['related_goal_id'], ['goals.goal_id'], name='progress_logs_related_goal_id_fkey'),
    sa.ForeignKeyConstraint(['related_project_id'], ['projects.project_id'], name='progress_logs_related_project_id_fkey'),
    sa.ForeignKeyConstraint(['related_task_id'], ['tasks.task_id'], name='progress_logs_related_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='progress_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('log_id', name='progress_logs_pkey')
    )
    op.create_table('chat_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('message', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='chat_history_pkey')
    )
    op.create_table('ai_interactions',
    sa.Column('interaction_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('intent', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('effectiveness_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('effectiveness_rating >= 1 AND effectiveness_rating <= 5', name='ai_interactions_effectiveness_rating_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='ai_interactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('interaction_id', name='ai_interactions_pkey')
    )
    op.create_table('tasks',
    sa.Column('task_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'todo'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=10), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('parent_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['high'::character varying, 'medium'::character varying, 'low'::character varying]::text[])", name='tasks_priority_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['todo'::character varying, 'in_progress'::character varying, 'blocked'::character varying, 'completed'::character varying]::text[])", name='tasks_status_check'),
    sa.CheckConstraint('parent_task_id <> task_id', name='tasks_check'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.task_id'], name='tasks_parent_task_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.project_id'], name='tasks_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', name='tasks_pkey')
    )
    op.create_table('procrastination_patterns',
    sa.Column('pattern_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trigger_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('impact_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('impact_level >= 1 AND impact_level <= 5', name='procrastination_patterns_impact_level_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='procrastination_patterns_user_id_fkey'),
    sa.PrimaryKeyConstraint('pattern_id', name='procrastination_patterns_pkey')
    )
    op.create_table('projects',
    sa.Column('project_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'planning'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=10), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['high'::character varying, 'medium'::character varying, 'low'::character varying]::text[])", name='projects_priority_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['planning'::character varying, 'active'::character varying, 'paused'::character varying, 'completed'::character varying, 'abandoned'::character varying]::text[])", name='projects_status_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='projects_user_id_fkey'),
    sa.PrimaryKeyConstraint('project_id', name='projects_pkey')
    )
    # ### end Alembic commands ###
